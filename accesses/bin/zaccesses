#!/usr/bin/env bash

set -eu

# 
# Массив для хранения __аргументов__, без __опций__ (отфильтровывается из всех переданных __параметров__).
# 
ARGUMENTS=()

# Зададим __опции__ по умолчанию.
OPTION_DEVELOPMENT=false
OPTION_SAVE=false
OPTION_OPEN=false
OPTION_ADVANCED=""

# Переберём все __параметры__,
# если встречена известная опция - отфильтровываем её.
while [[ $# -gt 0 ]]
do
	key="$1"
	case $key in
		-d|--develop)
		OPTION_DEVELOPMENT=true
		shift # забываем параметр (он - опция)
		;;
		-s|--save)
		OPTION_SAVE=true
		shift # забываем параметр (он - опция)
		;;
		-o|--open)
		OPTION_OPEN=true
		shift # забываем параметр (он - опция)
		;;
		-a|--advanced)
		OPTION_ADVANCED="$2"
		shift # забываем параметр (он - опция)
		shift # забываем параметр (он - значение опции)
		;;
		*)    # встретили неизвестный (для опций) параметр - он вероятно аргумент
		ARGUMENTS+=("$1") # сохраним параметр как аргумент
		shift # забываем параметр
		;;
	esac
done
# Опции отфильтрованы, в параметрах отались аргументы (если остались).
# Если остались необработанные параметры - они аргументы, восстановим аргументы.
[[ ${#ARGUMENTS[*]} -gt 0 ]] && \
	set -- "${ARGUMENTS[@]}"

if [[ "$OPTION_DEVELOPMENT" == true ]]
then
	echo "Имя функции: ${FUNCNAME-}"
	echo "Количество переданных параметров : $#"
	echo "Все параметры переданные функции: '$@'"
	echo "Запрошенная команда для вызова скрипта: $0"
	echo "Возможные аргументы ${ARGUMENTS[@]}"
	echo '$OPTION_DEVELOPMENT: ' $OPTION_DEVELOPMENT
	echo '$OPTION_SAVE: ' $OPTION_SAVE
	echo '$OPTION_OPEN: ' $OPTION_OPEN
	echo '$OPTION_ADVANCED: ' $OPTION_ADVANCED
fi

function app_man {
	man zaccesses
}

function echoe {
	echo -en "\033[31m" >&2
	echo -e $1 >&2
	echo -en "\033[0m" >&2
}

# Объявления hash-подобного массива:
declare -A ECHOC_COLORS
ECHOC_COLORS=(
	['style_default']='\033[0m'

	['red']='\033[31m'
	['green']='\033[32m'
	['blue']='\033[36m'
	['yellow']='\033[33m'

	['bold']='\033[1m'
)

function echoc {
	local NOSLASHN POSITIONAL
	NOSLASHN=false
	while [[ $# -gt 0 ]]
	do
		key="$1"
		case $key in
			-n)
			NOSLASHN=true
			shift
			;;
			*)
			POSITIONAL+=("$1")
			shift
			;;
		esac
	done
	[[ ${#POSITIONAL[*]} -gt 0 ]] && \
	set -- "${POSITIONAL[@]}"

	echo -en ${ECHOC_COLORS[$2]}
	if [[ "$NOSLASHN" = true ]]
	then
		echo -en $1
	else
		echo -e $1
	fi
	echo -en ${ECHOC_COLORS[style_default]}
}

function app_complete() {
	echo 'deploy rollback complete pull pull install help'
}

function app_my() {
	if [[ "$OPTION_SAVE" == true ]]
	then
		if [[ -z ${YANDEX_PASSWORD-} ]]
		then
			echo -n "Введите пароль: "
			read -s YANDEX_PASSWORD
			if [[ -z ${YANDEX_PASSWORD-} ]]
			then
				echo "Пароль пустой." >&2
				exit 1
			fi
		fi
		curl -T ~/accesses/my.yml https://webdav.yandex.ru/accesses/my.yml --user Zlatov:"${YANDEX_PASSWORD}"
		echoc "my.yml сохранён." green
	else
		if [[ -z ${YANDEX_PASSWORD-} ]]
		then
			echo -n "Введите пароль: "
			read -s YANDEX_PASSWORD
			if [[ -z ${YANDEX_PASSWORD-} ]]
			then
				echo "Пароль пустой." >&2
				exit 1
			fi
		fi
		wget https://webdav.yandex.ru/accesses/my.yml --user=Zlatov --password=$YANDEX_PASSWORD -P ~/accesses
		echoc "my.yml загружен." blue
	fi
	if [[ "$OPTION_OPEN" == true || "$OPTION_SAVE" != true ]]
	then
		subl ~/accesses/my.yml
	fi
}

# Переберём аргументы, обработаем команды
if [[ -n ${1-} ]]
then
	function_name=$1
	shift
	case $function_name in
		temp)
			app_temp $@
			;;
		my)
			app_my
			;;
		complete)
			app_complete $@
			;;
		man|-h|--help)
			app_man
			;;
		*)
			echoc "Ошибка." red
			echoe "Неизвестная команада. „${1}“"
			for i in ${!BASH_SOURCE[@]}
			do
				echo $i ' : ' ${BASH_SOURCE[$i]}
			done
			echo $@
			exit 1
			;;
	esac
fi
