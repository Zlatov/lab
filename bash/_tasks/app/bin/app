#!/usr/bin/env bash

# Прекращать выполнение программы если обнаружена ошибка или обращение к неустановленной переменной
set -eu

# Путь папки содержащей app
APP_PATH=$(dirname "${BASH_SOURCE[0]}")

# Подключаем всё
. $APP_PATH/../lib/app/common.sh

# Отчистим лог ошибок
> $errors_log_path

# Переберём аргументы, обработаем опции
POSITIONAL=() # временный массив аргументов без опций
O_LOCAL=false
O_YES=false
O_DETAIL=false
O_TEST_ID=""
while [[ $# -gt 0 ]]
do
  key="$1"
  case $key in
    -d|--detail)
    O_DETAIL=true
    shift # забываем аргумент
    ;;
    -s|--single_option)
    SINGLE_OPTION=true
    shift # забываем аргумент
    ;;
    -l|--local)
    O_LOCAL=true
    shift # забываем аргумент
    ;;
    -y|--yes)
    O_YES=true
    shift # забываем аргумент
    ;;
    -a|--advanced_option)
    ADVANCED_OPTION="$2"
    shift # забываем аргумент
    shift # забываем значение аргумента
    ;;
    -t|--test_id)
    O_TEST_ID="$2"
    shift # забываем аргумент
    shift # забываем значение аргумента
    ;;
    *)    # встретили неизвестную опцию
    POSITIONAL+=("$1") # сохраним опцию как аргумент
    shift # забываем аргумент
    ;;
  esac
done
# Если были переданы аргументы
[[ ${#POSITIONAL[*]} -gt 0 ]] && \
set -- "${POSITIONAL[@]}" # восстановим из временного массива аргументов

# Переберём аргументы, обработаем команды
if [[ -n ${1-} ]]
then
  function_name=$1
  shift
  case $function_name in
    deploy)
      app_deploy $@
      ;;
    rollback)
      app_rollback $@
      ;;

    test)
      app_test $@
      ;;
    test_get_id)
      app_test_get_id $@
      ;;
    test_prepare_place)
      app_test_prepare_place $@
      ;;
    test_pull_domain)
      app_test_pull_domain $@
      ;;
    test_pull_db)
      app_test_pull_db $@
      ;;
    test_pull_constants)
      app_test_pull_constants $@
      ;;
    test_pull_trees)
      app_test_pull_trees $@
      ;;
    test_pull_required_items)
      app_test_pull_required_items $@
      ;;
    test_start_domain)
      app_test_start_domain $@
      ;;

    complete)
      app_complete $@
      ;;
    pull)
      app_pull $@
      ;;
    man|-h|--help)
      app_man $@
      ;;
    *)
      echoc "Ошибка." red
      echoe "Неизвестная команада. „${1}“"
      for i in ${!BASH_SOURCE[@]}
      do
        echo $i ' : ' ${BASH_SOURCE[$i]}
      done
      echo $@
      exit 1
      ;;
  esac
fi
