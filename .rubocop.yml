# Игнорировать отсутствие магического комментария:
# frozen_string_literal: true
# 
# Надо понимать что мы теряем производительность если не используем замороженные
# строки там где это возможно, применяйте!: ` -"неизменяемая строка" `
Style/FrozenStringLiteralComment:
  Enabled: false

# Надо понимать что есть качественное различие между
# 
# module Foo
#   class Bar
#   end
# end
# 
# и
# 
# class Foo::Bar
# end
# 
# Если где то в модуль вынесен код:
# 
# module Foo
#   X = 42
# end
# 
# то следует инициализировать модуль До класса-потомка, иначе ошибка. Как выход,
# рубокоп предлагает везде использовать первый синтаксис, а это некрасиво)
Style/ClassAndModuleChildren:
  Enabled: false

# Корячить пустые методы с точка-запятой, нет уж извините!
Style/EmptyMethod:
  Enabled: false

# Не даёт сравнимать с нуль (... == 0), заставляет переписывать на `.zero?`, как-то вообще не согласен!
Style/NumericPredicate:
  Enabled: false

Metrics/MethodLength:
  Max: 30

Metrics/ClassLength:
  Max: 300

# fail обычно бросает исключение, raise пребрасывает после отлова при необходимости.
Style/SignalException:
  Enabled: false

# Что может быть более привычным чем простой if
Style/NegatedIf:
  Enabled: false

# Assignment - присвоения, в том числе +=...
# Branch - явное прямое ветвление программы (вызов методов).
# Condition - логические выражения
# AbcSize = Math.sqrt(A * A + B * B + C * C)
Metrics/AbcSize:
  # Enabled: false
  Max: 30
  CountRepeatedAttributes: false
